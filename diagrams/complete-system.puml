@startuml Complete Employee Management System - Fixed

class Employee {
    - employeeId: String
    - firstName: String
    - lastName: String
    - email: String
    - phoneNumber: String
    - hireDate: Date
    - salary: Double
    - position: String
    - status: EmployeeStatus
    - departmentId: String
    + getEmployeeId(): String
    + getFullName(): String
    + getEmail(): String
    + getSalary(): Double
    + updateSalary(newSalary: Double): void
    + changeDepartment(departmentId: String): void
    + getEmployeeInfo(): String
    + setStatus(status: EmployeeStatus): void
}

class Department {
    - departmentId: String
    - departmentName: String
    - managerId: String
    - budget: Double
    - location: String
    - description: String
    - employeeCount: int
    + getDepartmentId(): String
    + getDepartmentName(): String
    + getManagerId(): String
    + getBudget(): Double
    + addEmployee(employeeId: String): void
    + removeEmployee(employeeId: String): void
    + getEmployeeCount(): int
    + updateBudget(newBudget: Double): void
    + getDepartmentInfo(): String
}

class Payroll {
    - payrollId: String
    - employeeId: String
    - payPeriod: String
    - baseSalary: Double
    - overtimePay: Double
    - bonuses: Double
    - deductions: Double
    - netPay: Double
    - payDate: Date
    - status: PayrollStatus
    + calculateGrossPay(): Double
    + calculateDeductions(): Double
    + calculateNetPay(): Double
    + generatePayrollReport(): String
    + processPayment(): void
    + getPayrollSummary(): String
}

class Attendance {
    - attendanceId: String
    - employeeId: String
    - date: Date
    - checkInTime: Time
    - checkOutTime: Time
    - totalHours: Double
    - status: AttendanceStatus
    - notes: String
    + getAttendanceId(): String
    + getEmployeeId(): String
    + getDate(): Date
    + getTotalHours(): Double
    + calculateHours(): Double
    + markCheckIn(): void
    + markCheckOut(): void
    + getAttendanceStatus(): AttendanceStatus
    + addNotes(notes: String): void
}

enum EmployeeStatus {
    ACTIVE
    INACTIVE
    ON_LEAVE
    TERMINATED
}

enum PayrollStatus {
    PENDING
    PROCESSED
    PAID
    FAILED
}

enum AttendanceStatus {
    PRESENT
    ABSENT
    LATE
    HALF_DAY
    ON_LEAVE
}

' Fixed Relationships
Employee }o--|| Department : "belongs to"
Department ||--o{ Employee : "manages"
Employee ||--o{ Payroll : "has"
Payroll }o--|| Employee : "for"
Employee ||--o{ Attendance : "has"
Attendance }o--|| Employee : "belongs to"
Employee ||--|| EmployeeStatus : uses
Payroll ||--|| PayrollStatus : uses
Attendance ||--|| AttendanceStatus : uses

' Self-referencing relationship for manager-subordinate
Employee ||--o| Employee : "manages"

@enduml